"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[811],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return c}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),c=i,k=u["".concat(s,".").concat(c)]||u[c]||d[c]||r;return a?n.createElement(k,l(l({ref:t},m),{},{components:a})):n.createElement(k,l({ref:t},m))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5732:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var n=a(3117),i=a(102),r=(a(7294),a(3905)),l=["components"],o={},s="Syntax Reference",p={unversionedId:"syntax-reference",id:"syntax-reference",title:"Syntax Reference",description:"Configuration is defined using the simplified CUE language. Every directory",source:"@site/docs/syntax-reference.mdx",sourceDirName:".",slug:"/syntax-reference",permalink:"/syntax-reference",draft:!1,editUrl:"https://github.com/namespacelabs/documentation/tree/main/docs/syntax-reference.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Examples",permalink:"/examples"},next:{title:"Node.js / Web",permalink:"/integrations/nodejs"}},m={},d=[{value:"<code>server</code>",id:"server",level:2},{value:"Services",id:"services",level:3},{value:"Runtime Config",id:"runtime-config",level:3},{value:"Resource Config (advanced)",id:"resource-config-advanced",level:3},{value:"<code>sidecars</code>",id:"sidecars",level:2},{value:"<code>volumes</code>",id:"volumes",level:2},{value:"<code>secrets</code>",id:"secrets",level:2},{value:"<code>tests</code>",id:"tests",level:2},{value:"<code>resources</code> (advanced)",id:"resources-advanced",level:2},{value:"<code>resourceClasses</code> (advanced)",id:"resourceclasses-advanced",level:2},{value:"<code>providers</code> (advanced)",id:"providers-advanced",level:2},{value:"Image building and integrations",id:"image-building-and-integrations",level:2},{value:"<code>image</code>",id:"image",level:3},{value:"<code>imageFrom</code>/<code>integration</code>",id:"imagefromintegration",level:3}],u={toc:d};function c(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"syntax-reference"},"Syntax Reference"),(0,r.kt)("p",null,"Configuration is defined using the simplified ",(0,r.kt)("a",{parentName:"p",href:"https://cuelang.org/"},"CUE language"),". Every directory\nacts as a ",(0,r.kt)("a",{parentName:"p",href:"https://cuelang.org/docs/concepts/packages/#overview"},"package"),". Each ",(0,r.kt)("inlineCode",{parentName:"p"},".cue")," file may\ncontain one or multiple top-level definitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#server"},(0,r.kt)("inlineCode",{parentName:"a"},"server"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sidecars"},(0,r.kt)("inlineCode",{parentName:"a"},"sidecars"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#volumes"},(0,r.kt)("inlineCode",{parentName:"a"},"volumes"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#secrets"},(0,r.kt)("inlineCode",{parentName:"a"},"secrets"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#tests"},(0,r.kt)("inlineCode",{parentName:"a"},"tests")))),(0,r.kt)("p",null,"Advanced definitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#resources"},(0,r.kt)("inlineCode",{parentName:"a"},"resources"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#resourceclasses"},(0,r.kt)("inlineCode",{parentName:"a"},"resourceClasses"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#providers"},(0,r.kt)("inlineCode",{parentName:"a"},"providers")))),(0,r.kt)("h2",{id:"server"},(0,r.kt)("inlineCode",{parentName:"h2"},"server")),(0,r.kt)("p",null,"Defines a server in this package. Only a single server is supported per package, but the actual\nsource code may be elsewhere."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"name (string)"),": the stable ID for the server. It affects the names of the corresponding\nKubernetes resources, generated URLs, etc.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"integration"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"image"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"imageFrom"),": See\n",(0,r.kt)("a",{parentName:"p",href:"#image-building-and-integrations"},"Image building and integrations"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"args"),": a list or a map of command-line arguments to pass to the server. Examples:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'args: ["myarg"]\n\n// Gets translated to "--myarg=myvalue"\nargs: {\n  myarg: "myvalue"\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"env"),": a map of environment variables to pass to the server. Environment variables may be injected\nfrom a ",(0,r.kt)("a",{parentName:"p",href:"#secrets"},"secrets"),". Examples:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'env: {\n  APP_USER: "my-name"\n  APP_PASSWORD: fromSecret: ":password"\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"class"),": one of ",(0,r.kt)("inlineCode",{parentName:"p"},"stateless")," (default) or ",(0,r.kt)("inlineCode",{parentName:"p"},"stateful"),'. "stateless" corresponds to the Kubernetes\n',(0,r.kt)("inlineCode",{parentName:"p"},"Deployment"),' resource, while "stateful" corresponds to ',(0,r.kt)("inlineCode",{parentName:"p"},"StatefulSet"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"requires"),": a list of package names of servers that need to be deployed together with this server.\nTheir addresses are available via the ",(0,r.kt)("a",{parentName:"p",href:"#runtime-config"},"runtime config"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"mounts"),": a map of mounts to attach to the server. The key is the path inside the container, the\nvalue is the volume reference or an inline ",(0,r.kt)("a",{parentName:"p",href:"#volumes"},"volume")," definition. Example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'mounts: {\n  "/data": ":my-volume" // my-volume lives in the same package\n  "/data2": "example.com/path/to/package:my-other-volume"\n  "/data3": kind: "namespace.so/volume/ephemeral"\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"services"),": a map of services to expose. See the ",(0,r.kt)("a",{parentName:"p",href:"#services"},"services")," section for more details.\nExample:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'services: {\n  webapi: {\n    port: 4000\n    kind: "http"\n    ingress: internetFacing: true\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"resources"),": (advanced) a list of ",(0,r.kt)("a",{parentName:"p",href:"#resources"},"resource")," references that need to be deployed with\nthis server. Their instances are available via the ",(0,r.kt)("a",{parentName:"p",href:"#resource-config"},"resource config"),".\nAlternatively, ",(0,r.kt)("inlineCode",{parentName:"p"},"resources")," may be a map of inline resource definitions. Example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'resources: {\n    myDatabase: {\n        kind: "example.com/storage:Database"\n        on:   "example.com/storage/postgres"\n\n        input: {\n            name: "mydatabase"\n        }\n    }\n}\n')))),(0,r.kt)("h3",{id:"services"},"Services"),(0,r.kt)("p",null,"A server may expose one or multiple services. A service is an exposed port with a name and an\nadditional metadata, that helps Namespace to correctly forward it. Besides the server itself,\n",(0,r.kt)("a",{parentName:"p",href:"#sidecars"},"sidecars")," may also expose services."),(0,r.kt)("p",null,"Fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"port (int)"),": the port number to expose.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"kind (string)"),": the kind of the service. Currently only ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," is supported.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ingress"),": the ingress configuration."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"internetFacing (bool)"),": whether the service should be exposed to the internet. If ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", the\nservice will be exposed via an ingress controller using a Namespace-managed domain. Depending on\nthe deployment cluster, this domain is local or public. If ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," (default), the service will\nbe exposed only within the cluster.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"httpRoutes"),": a map of HTTP routes to expose. The key is the domain wildcard pattern (matching\nnot implemented yet), the value is a list of path prefixes. The user's server needs to handle\nrequests for the declared paths. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},'"*": ["/"]'),". Example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'httpRoutes: {\n  "*.example.com": ["/api"]\n}\n')))))),(0,r.kt)("h3",{id:"runtime-config"},"Runtime Config"),(0,r.kt)("p",null,"At runtime, a server/sidecar binary can read ",(0,r.kt)("inlineCode",{parentName:"p"},"/namespace/config/runtime.json")," to get the addresses\nof the required servers, ports, etc. Schema:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/namespacelabs/foundation/blob/main/schema/runtime/config.proto"},"config.proto"),"."),(0,r.kt)("h3",{id:"resource-config-advanced"},"Resource Config (advanced)"),(0,r.kt)("p",null,"At runtime, a server/sidecar binary can read ",(0,r.kt)("inlineCode",{parentName:"p"},"/namespace/config/resources.json")," to get the instances\nof the required ",(0,r.kt)("a",{parentName:"p",href:"#resources"},"resources"),". Instances are keyed by their resource package reference. The value is the\npopulated resource instance definition. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "example.com/server:myDatabase": {\n        "url": "http://foo.nscloud.dev/db"\n    },\n    "example.com/server:myCache": {\n        "capacity": "1GiB"\n    }\n}\n')),(0,r.kt)("p",null,"This allows easy access of instance values for dynamically typed languages (e.g. TypeScript). For\nGo, we provide a\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/namespacelabs/foundation/blob/07ddda0b65d7e11937a820ebcf199b21ea308294/framework/resources/parsing.go#L18"},"parsing helper"),"."),(0,r.kt)("h2",{id:"sidecars"},(0,r.kt)("inlineCode",{parentName:"h2"},"sidecars")),(0,r.kt)("p",null,"Additional binaries to run alongside the main server binary. The package must have a server. A\nsidecar may serve a service port."),(0,r.kt)("p",null,"Syntax: a map, with the stable sidecar name as the key and the sidecar definition as the value:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"image"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"imageFrom"),": See ",(0,r.kt)("a",{parentName:"li",href:"#image-building-and-integrations"},"Image building and integrations"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"env"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"mounts"),": the same as in the ",(0,r.kt)("a",{parentName:"li",href:"#server"},"server")," definition.")),(0,r.kt)("h2",{id:"volumes"},(0,r.kt)("inlineCode",{parentName:"h2"},"volumes")),(0,r.kt)("p",null,"A map from volume names to their definitions."),(0,r.kt)("p",null,"Volume definition: full form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'"volume-name": {\n    kind:       "<volume kind url>"\n    <volume-specific arguments>\n}\n')),(0,r.kt)("p",null,"Short form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'"volume-name": <volume kind keyword>: {\n  <volume-specific arguments>\n}\n')),(0,r.kt)("p",null,"The following volume kinds are supported (short/full forms):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ephemeral")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"namespace.so/volume/ephemeral"),": an ephemeral volume that vanishes between\ndeployments."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"persistent")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"namespace.so/volume/persistent"),": a fixed-size volume that persists between\ndeployments.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": the stable ID of the volume, propagated to Kubernetes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"size"),": the size of the volume, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"1GiB"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"configurable")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"namespace.so/volume/configurable"),": providing static or generated content as a\nvolume. If the value is a string, it is interpreted as the file content. If the value is a map,\nthe following fields are supported:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fromDir"),": the directory to copy the files from, relative to the package."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fromFile"),": the file to copy the content from, relative to the package."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fromSecret"),": reference to the ",(0,r.kt)("a",{parentName:"li",href:"#secrets"},"secret"),", either just a ",(0,r.kt)("inlineCode",{parentName:"li"},":<secret name>")," (for secrets\nin the same package) or in the form of ",(0,r.kt)("inlineCode",{parentName:"li"},"<full package name>:<secret name>"),". The secret value is\nprovided as the file content at runtime."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fromKubernetesSecret"),": mounts a Kubernetes secret. Format: ",(0,r.kt)("inlineCode",{parentName:"li"},"<secret name>:<key name>"),".")))),(0,r.kt)("h2",{id:"secrets"},(0,r.kt)("inlineCode",{parentName:"h2"},"secrets")),(0,r.kt)("p",null,"A secret is a named entity whose value is provided at runtime. Secret values can be encrypted,\nuser-provided values that are commited to the repository using ",(0,r.kt)("inlineCode",{parentName:"p"},"ns secrets")," command. Committed\nsecrets may be set per server that reads them, or pinned for an entire workspace. For simplicity,\nNamespace also supports generated secrets. These will be generated dynamically during provisioning."),(0,r.kt)("p",null,"Syntax: a map, with the secret name as the key and the secret definition as the value:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"description"),": a description of the secret for debugging."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"generate"),": configuration block for generated secrets",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"uniqueId"),": unique identifier for Kubernetes deployment"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"randomByteCount"),": amount of bytes in generated secret"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"format"),": Valid values: ",(0,r.kt)("inlineCode",{parentName:"li"},"FORMAT_BASE64")," (default), ",(0,r.kt)("inlineCode",{parentName:"li"},"FORMAT_BASE32"))))),(0,r.kt)("h2",{id:"tests"},(0,r.kt)("inlineCode",{parentName:"h2"},"tests")),(0,r.kt)("p",null,"A test is a binary that can be executed together with the given server stack. A\n",(0,r.kt)("a",{parentName:"p",href:"#runtime-config"},"Namespace runtime config")," is available the test binary to determine the addresses\nof the servers under test."),(0,r.kt)("p",null,"Syntax: a map, with the test name as the key and the test definition as the value:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"integration"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"image"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"imageFrom"),": See\n",(0,r.kt)("a",{parentName:"li",href:"#image-building-and-integrations"},"Image building and integrations"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"serversUnderTest"),": an optional list of package names of the servers to start up. If a test is\ndefined in a package with a server, that server is added to this list automatically.")),(0,r.kt)("h2",{id:"resources-advanced"},(0,r.kt)("inlineCode",{parentName:"h2"},"resources")," (advanced)"),(0,r.kt)("p",null,"Resources represent a deployable unit that has a well-defined lifecycle. Resources have an identity,\nmust be created explicitly, can be owned by other resources or servers, and can be destroyed."),(0,r.kt)("p",null,"Resources can be used to model databases, caches, etc."),(0,r.kt)("p",null,"Syntax: a map, with the resource name as the key and the resource definition as the value:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"class"),": a reference to the ",(0,r.kt)("a",{parentName:"li",href:"#resourceclasses"},"resource class")," that is being instantiated."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"provider"),": a reference to the ",(0,r.kt)("a",{parentName:"li",href:"#providers"},"provider")," that will provide the instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"resources"),": a map of resources this resource depends on. Key is the name under which the\ndependecy will be made availabe. Value is the reference of the resource dependecy."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"intent"),": sets the intent expressed by the resource class directly in CUE.")),(0,r.kt)("h2",{id:"resourceclasses-advanced"},(0,r.kt)("inlineCode",{parentName:"h2"},"resourceClasses")," (advanced)"),(0,r.kt)("p",null,"A resource class defines intent and instance type for a resource. There can be multiple\n",(0,r.kt)("a",{parentName:"p",href:"#providers"},"providers")," for a resource class. A good analogy is that resource classes define\ninterfaces and providers implement that interface. Currently, we only support\n",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers"},"Protocol Buffers")," as intent and instance types."),(0,r.kt)("p",null,"Syntax: a map, with the resource class name as the key and the resource class definition as the\nvalue:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"intent"),": intent type definition",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": fully qualified protobuf type"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"source"),": path to the ",(0,r.kt)("inlineCode",{parentName:"li"},".proto")," file that contains the protobuf definition. May be a relative\npath."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"produces"),": instance type definition",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"same schema as intent"))))),(0,r.kt)("h2",{id:"providers-advanced"},(0,r.kt)("inlineCode",{parentName:"h2"},"providers")," (advanced)"),(0,r.kt)("p",null,"Providers follow a ",(0,r.kt)("a",{parentName:"p",href:"#resourceclasses"},"resource class")," definition and provide and instance from an\nintent. Providers can depend on other resources, fill statrun initializers on resource creation."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"initializedWith"),": Allows specifying a binary invocation that will produce the intent. The intent\nis provided to the binary as a marshaled string flag named ",(0,r.kt)("inlineCode",{parentName:"li"},"--intent"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"image"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"imageFrom"),": See ",(0,r.kt)("a",{parentName:"li",href:"#image-building-and-integrations"},"Image building and integrations"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"resources"),": a list of ",(0,r.kt)("a",{parentName:"li",href:"#resources"},"resource")," references that need to be deployed with this\nserver. Their instances are available to the initializer via the\n",(0,r.kt)("a",{parentName:"li",href:"#resource-config"},"resource config"),". The resource config is provided to the binary as a marshaled\nstring flag named ",(0,r.kt)("inlineCode",{parentName:"li"},"--resources"),". Alternatively, ",(0,r.kt)("inlineCode",{parentName:"li"},"resources")," may be a map of inline resource\ndefinitions.")),(0,r.kt)("h2",{id:"image-building-and-integrations"},"Image building and integrations"),(0,r.kt)("p",null,"Servers, sidecars and tests can be built from source code (using ",(0,r.kt)("inlineCode",{parentName:"p"},"imageFrom")," field) or from a\npre-built image from an image registry (using ",(0,r.kt)("inlineCode",{parentName:"p"},"image")," field)."),(0,r.kt)("p",null,"For servers and tests it is recommended to use ",(0,r.kt)("inlineCode",{parentName:"p"},"integration")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"imageFrom")," (with a similar\nsyntax). An integration provides a deep support for a particular language/framework. In addition to\nimage building, an integration may do other things, such as setting up file sync for Node.js\ndevelopment."),(0,r.kt)("h3",{id:"image"},(0,r.kt)("inlineCode",{parentName:"h3"},"image")),(0,r.kt)("p",null,"A pre-built image from an image registry to use for the server or test. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'image: "postgres:14.0@sha256:db927beee892dd02fbe963559f29a7867708747934812a80f83bff406a0d54fd"\n')),(0,r.kt)("h3",{id:"imagefromintegration"},(0,r.kt)("inlineCode",{parentName:"h3"},"imageFrom"),"/",(0,r.kt)("inlineCode",{parentName:"h3"},"integration")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"imageFrom")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"integration")," fields in general have the same syntax, with some fields only\navailable for a specific case."),(0,r.kt)("p",null,"Full form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'integration|imageFrom: {\n    kind:       "<integration url>"\n    <integration-specific arguments>\n}\n')),(0,r.kt)("p",null,"Short forms:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'integration|imageFrom: <integration short keyword>: {\n    <integration-specific arguments>\n}\n\n// When there are no arguments\nintegration|imageFrom: "<integration short keyword>"\n')),(0,r.kt)("p",null,"The following integrations are supported (short/full forms):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"dockerfile")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace.so/from-dockerfile"),": an opaque Dockerfile. Arguments:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"src"),": the path to the Dockerfile. Can also be specified as ",(0,r.kt)("inlineCode",{parentName:"li"},'dockerfile: "<file path>"'),".\nDefaults to ",(0,r.kt)("inlineCode",{parentName:"li"},'"Dockerfile"'),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"go")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace.so/from-go"),": a Go binary. Arguments:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pkg"),": the Go package to build. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},'"."'),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"nodejs")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace.so/from-nodejs"),": a Node.js application. Arguments:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pkg"),": the Node.js package to build. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},'"."'),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"backends"),": see the Web ",(0,r.kt)("inlineCode",{parentName:"li"},"backends")," below."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"web")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace.so/from-web"),": a pure browserside Node.js application (e.g. implemented with\nVite or Create-React-App). Supported only as ",(0,r.kt)("inlineCode",{parentName:"p"},"integration"),". Arguments:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pkg"),": the Node.js package to build. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},'"."'),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"service"),": a name of the service that corresonds to the Web server, ",(0,r.kt)("em",{parentName:"li"},"required"),". This is used for\nnon-dev builds when prebuilt, static files are served (opposed to the hot-reload server, e.g.\n",(0,r.kt)("inlineCode",{parentName:"li"},"vite"),", for development)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"build"),": build-related arguments:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"outDir"),": the directory to output the built files to when building for non-dev environments.\nDefaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"dist"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"backends"),": a map from an alias to the backend package address. This makes Namespace generate a\n",(0,r.kt)("inlineCode",{parentName:"li"},"src/config/backends.ns.js")," file in the built image that contains the backend URLs, accessible\nfrom the browser. The ",(0,r.kt)("a",{parentName:"li",href:"#runtime-config"},"runtime config")," wouldn't work here as its content is not\navailable from the browser."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"shellscript"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"namespace.so/from-shellscript"),": wraps a shell script into an Alpine-based image\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"bash")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"curl"),". Arguments:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"entrypoint"),": a path to the script."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"requiredPackages"),": additional Alpine packages to install. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},'["jq"]'),".")))))}c.isMDXComponent=!0}}]);