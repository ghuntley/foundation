"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[49],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,v=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(v,o(o({ref:n},l),{},{components:t})):a.createElement(v,o({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9525:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],s={sidebar_position:3},p="Extension",c={unversionedId:"concepts/extension",id:"concepts/extension",title:"Extension",description:"An extension is a code unit that is run as a part of a server. Unlike services, extensions",source:"@site/docs/concepts/extension.md",sourceDirName:"concepts",slug:"/concepts/extension",permalink:"/concepts/extension",editUrl:"https://github.com/namespacelabs/docs/tree/main/docs/concepts/extension.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"Service",permalink:"/concepts/service"},next:{title:"Server",permalink:"/concepts/server"}},l={},d=[{value:"Providing an Instance of an Extension-Specific Type",id:"providing-an-instance-of-an-extension-specific-type",level:2},{value:"Injecting Extension-Provided Objects",id:"injecting-extension-provided-objects",level:2},{value:"Global Initialisation",id:"global-initialisation",level:2}],u={toc:d};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"extension"},"Extension"),(0,r.kt)("p",null,"An ",(0,r.kt)("strong",{parentName:"p"},"extension")," is a code unit that is run as a part of a ",(0,r.kt)("strong",{parentName:"p"},"server"),". Unlike ",(0,r.kt)("strong",{parentName:"p"},"services"),", ",(0,r.kt)("strong",{parentName:"p"},"extensions"),"\ndon't expose RPC endpoints. Instead, the ",(0,r.kt)("strong",{parentName:"p"},"extension")," code is executed in one or both ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Provide objects to other ",(0,r.kt)("strong",{parentName:"li"},"extensions"),"/",(0,r.kt)("strong",{parentName:"li"},"services"),"."),(0,r.kt)("li",{parentName:"ul"},"Provide global initialisation for a ",(0,r.kt)("strong",{parentName:"li"},"server"),".")),(0,r.kt)("h2",{id:"providing-an-instance-of-an-extension-specific-type"},"Providing an Instance of an Extension-Specific Type"),(0,r.kt)("p",null,"Let's say we want to provide a direct API for a Postgres database. First define an extension with\nits input type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'// extension.cue\nimport "namespacelabs.dev/foundation/std/fn"\n\n$providerProto: inputs.#Proto & {\n  source: "provider.proto"\n}\n\nextension: fn.#Extension & {\n  provides: {\n    Database: {\n      type: $providerProto.types.Database\n\n      availableIn: {\n        go: {\n          // This is a Go-specific type.\n          package: "github.com/jackc/pgx/v4/pgxpool"\n          type:    "*Pool"\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"// provider.proto\n\nmessage Database {\n    string name = 1;\n    foundation.std.types.Resource schema_file = 2;\n}\n")),(0,r.kt)("p",null,"Namespace generates a ",(0,r.kt)("inlineCode",{parentName:"p"},"Provide")," interface that needs to be implemented. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// deps.fn.go\n\ntype ExtensionDeps struct {\n  // Here may be objects of types provided by extensions.\n}\n\ntype _checkProvideDatabase func(context.Context, string, *Database, ExtensionDeps) (*pgxpool.Pool, error)\n\nvar _ _checkProvideDatabase = ProvideDatabase\n")),(0,r.kt)("p",null,"Implement the extension logic:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// my_file.go\n\nfunc ProvideDatabase(ctx context.Context, caller string, db *Database, deps ExtensionDeps) (*pgxpool.Pool, error) {\n  ...\n\n  return conn, nil\n}\n")),(0,r.kt)("p",null,"Done! The extension-provide typed (",(0,r.kt)("inlineCode",{parentName:"p"},"*pgxpool.Pool")," in this case) is available for injection in other\n",(0,r.kt)("inlineCode",{parentName:"p"},"Extensions"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"Services"),"."),(0,r.kt)("h2",{id:"injecting-extension-provided-objects"},"Injecting Extension-Provided Objects"),(0,r.kt)("p",null,"After an ",(0,r.kt)("inlineCode",{parentName:"p"},"Extension")," has been defined, it can be injected in other ",(0,r.kt)("inlineCode",{parentName:"p"},"Extensions"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"Services"),". Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'// service.cue\nimport (\n  "namespacelabs.dev/foundation/std/fn"\n  "namespacelabs.dev/foundation/std/fn:inputs"\n  "namespacelabs.dev/my_package/postgres"\n)\n\nservice: fn.#Service & {\n  instantiate: {\n    db: postgres.#Exports.Database & {\n      // Filling in the input "Database" proto.\n      with: {\n        name: "todos"\n        schemaFile: inputs.#FromFile & {\n          path: "schema.sql"\n        }\n      }\n    }\n  }\n\n  ...\n}\n')),(0,r.kt)("p",null,'The provided value can be used via "ServiceDeps"/"ExtensionDeps":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// deps.fn.go\n\ntype ServiceDeps struct {\n  Db *pgxpool.Pool\n}\n\ntype checkWireService func(context.Context, *server.Grpc, ServiceDeps)\n")),(0,r.kt)("h2",{id:"global-initialisation"},"Global Initialisation"),(0,r.kt)("p",null,"If an ",(0,r.kt)("inlineCode",{parentName:"p"},"Extension")," definition contains ",(0,r.kt)("inlineCode",{parentName:"p"},"hasInitialization: true"),", its initialization code is executed\neagerly, before the server starts serving. An ",(0,r.kt)("inlineCode",{parentName:"p"},"Extension")," is bundled with and instantiated in a\n",(0,r.kt)("inlineCode",{parentName:"p"},"Server")," if the ",(0,r.kt)("inlineCode",{parentName:"p"},"Server")," or any of its transitive dependencies import the package with the\nextension."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cue"},'import (\n  "namespacelabs.dev/foundation/std/fn"\n  "namespacelabs.dev/foundation/std/go/grpc/interceptors"\n)\n\nextension: fn.#Extension & {\n  hasInitialization: true\n\n  instantiate: {\n    "interceptors": interceptors.#Exports.InterceptorRegistration\n  }\n}\n')),(0,r.kt)("p",null,"Namespace generates a stub of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Prepare")," function that needs to be implemented:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type ExtensionDeps struct {\n  ...\n}\n\ntype _checkPrepare func(context.Context, ExtensionDeps) error\n\nvar _ _checkPrepare = Prepare\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Namespace can bootstrap a new extension for you.\nTry ",(0,r.kt)("inlineCode",{parentName:"p"},"ns src create extension path/to/extension"),"!"))))}m.isMDXComponent=!0}}]);