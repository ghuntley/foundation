"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[719],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(t),m=i,f=l["".concat(c,".").concat(m)]||l[m]||d[m]||a;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=l;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},5424:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var r=t(3117),i=t(102),a=(t(7294),t(3905)),o=["components"],s={},c="End-to-end to testing",u={unversionedId:"guides/end-to-end-testing",id:"guides/end-to-end-testing",title:"End-to-end to testing",description:"Namespace makes it trivial to write end-to-end tests. The same server",source:"@site/docs/guides/end-to-end-testing.mdx",sourceDirName:"guides",slug:"/guides/end-to-end-testing",permalink:"/guides/end-to-end-testing",draft:!1,editUrl:"https://github.com/namespacelabs/documentation/tree/main/docs/guides/end-to-end-testing.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Building an Internet facing API",permalink:"/guides/internet-facing"},next:{title:"Running tests on Git pushes",permalink:"/guides/cicd"}},p={},d=[],l={toc:d};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"end-to-end-to-testing"},"End-to-end to testing"),(0,a.kt)("p",null,"Namespace makes it trivial to write end-to-end tests. The same server\ndefinitions you are already use for development and production are also used for\ntesting purposes, leaving you only have to write the test specification itself."),(0,a.kt)("p",null,"In a test, Namespace instantiates the ",(0,a.kt)("em",{parentName:"p"},"Servers under Test")," (and their\ndependencies) in an ephemeral environment, and runs a ",(0,a.kt)("em",{parentName:"p"},"test driver")," you provide,\nto validate that stack. The typical ",(0,a.kt)("em",{parentName:"p"},"test driver")," issues API calls against the\nstack, to validate a particular scenario."),(0,a.kt)("p",null,"To get started, create a new directory, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"service/test"),", and create a new\nfile ",(0,a.kt)("inlineCode",{parentName:"p"},"test.cue")," with your test specification:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import "namespacelabs.dev/foundation/std/fn"\n\ntest: fn.#Test & {\n    // The name of the test, for debugging purposes.\n    name: "test-write-workflow"\n\n    binary: {\n        // How the test driver is built. This examples uses Go, but test\n        // drivers can be written in any language.\n        from: go_package: "."\n    }\n\n    fixture: {\n        // The package name of the server being tested.\n        sut: "github.com/username/module/api/server"\n    }\n}\n')),(0,a.kt)("p",null,"And then write your test, in ",(0,a.kt)("inlineCode",{parentName:"p"},"service/test/test.go"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n\n    "namespacelabs.dev/foundation/testing"\n    "github.com/username/module/api/service"\n)\n\nfunc main() {\n    testing.Do(func(ctx context.Context, t testing.Test) error {\n        endpoint := t.MustEndpoint("github.com/username/module/api/service", "service")\n\n        conn, err := t.Connect(ctx, endpoint)\n        if err != nil {\n            return err\n        }\n\n        cli := service.NewEchoServiceClient(conn)\n\n        // Issue an API call against the service.\n        if _, err = cli.Echo(ctx, &service.EchoRequest{\n            // ...\n        }); err != nil {\n            return err\n        }\n\n        // Test passed!\n        return nil\n    })\n}\n')),(0,a.kt)("p",null,"Check our ",(0,a.kt)("a",{parentName:"p",href:"/roadmap"},"Roadmap")," for a sneak peak on what's coming in the future in\nend-to-end testing, including API call recording, and replaying."))}m.isMDXComponent=!0}}]);