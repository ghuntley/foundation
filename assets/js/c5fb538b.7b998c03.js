"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[71],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8425:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:6},l="Design Principles",c={unversionedId:"advanced/design-principles",id:"advanced/design-principles",title:"Design Principles",description:"Development + Infrastructure Composition",source:"@site/docs/advanced/design-principles.md",sourceDirName:"advanced",slug:"/advanced/design-principles",permalink:"/advanced/design-principles",editUrl:"https://github.com/namespacelabs/docs/tree/main/docs/advanced/design-principles.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"sidebar",previous:{title:"Environment",permalink:"/concepts/environment"},next:{title:"Key Management",permalink:"/advanced/keys"}},p={},u=[{value:"Development + Infrastructure Composition",id:"development--infrastructure-composition",level:2},{value:"Environments",id:"environments",level:2},{value:"Language Support",id:"language-support",level:2},{value:"Reproducibility",id:"reproducibility",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"design-principles"},"Design Principles"),(0,a.kt)("h2",{id:"development--infrastructure-composition"},"Development + Infrastructure Composition"),(0,a.kt)("p",null,"One of our observations on software management costs, is the inability to think about software stacks as a whole. Often, development, testing and production are managed separately, by different teams, with different tools. This leads to the creation of silos, and lack of incentive structures that not only motivate these aspects to work well together, but work well together across teams."),(0,a.kt)("p",null,"For example, how often have we heard of teams struggling with maintaining their development stacks up-to-date, when the services they depend on keep changing. Our how hard it is to coordinate testing and pre-release validation of different services."),(0,a.kt)("p",null,"In ",(0,a.kt)("strong",{parentName:"p"},"Foundation"),", we approach composition deliberately. When a service needs a database, that relationship drives,"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Code: the right SDK will be made available to the codebase;"),(0,a.kt)("li",{parentName:"ul"},"Testing: the right fake or real server will be pulled in in a test suite automatically;"),(0,a.kt)("li",{parentName:"ul"},"Production: the database SDK instance available to the codebase, is pre-configured with the appropriate addressing+auth material."),(0,a.kt)("li",{parentName:"ul"},"And cross-environment deployment: the database instance is created as needed to support a particular environment.")),(0,a.kt)("h2",{id:"environments"},"Environments"),(0,a.kt)("p",null,"To write."),(0,a.kt)("p",null,"(Environments are a first-class primitive used for parameterization.)"),(0,a.kt)("h2",{id:"language-support"},"Language Support"),(0,a.kt)("p",null,"To write."),(0,a.kt)("p",null,"(Minimal additional surface on top of regular language tools.)"),(0,a.kt)("h2",{id:"reproducibility"},"Reproducibility"),(0,a.kt)("p",null,"To write."),(0,a.kt)("p",null,'(Dependencies are managed tightly, to guarantee reproducibility both for development "I don\'t see this bug in my machine", as well as production (security)).'))}m.isMDXComponent=!0}}]);