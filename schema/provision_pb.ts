// @generated by protobuf-ts 2.7.0 with parameter force_disable_services,add_pb_suffix,force_exclude_all_options
// @generated from protobuf file "schema/provision.proto" (package "foundation.schema", syntax proto3)
// tslint:disable
//
// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message foundation.schema.Invocation
 */
export interface Invocation {
    /**
     * @generated from protobuf field: string binary = 1;
     */
    binary: string;
    /**
     * @generated from protobuf field: repeated string args = 2;
     */
    args: string[];
    /**
     * @generated from protobuf field: string working_dir = 4;
     */
    workingDir: string;
    /**
     * @generated from protobuf field: map<string, foundation.schema.InvocationSnapshot> snapshots = 5;
     */
    snapshots: {
        [key: string]: InvocationSnapshot;
    };
    /**
     * @generated from protobuf field: bool no_cache = 6;
     */
    noCache: boolean;
    /**
     * @generated from protobuf field: bool requires_keys = 7;
     */
    requiresKeys: boolean;
    /**
     * @generated from protobuf field: repeated foundation.schema.Invocation.ValueInjection inject = 8;
     */
    inject: Invocation_ValueInjection[];
}
/**
 * @generated from protobuf message foundation.schema.Invocation.ValueInjection
 */
export interface Invocation_ValueInjection {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
}
/**
 * @generated from protobuf message foundation.schema.InvocationSnapshot
 */
export interface InvocationSnapshot {
    /**
     * @generated from protobuf field: string from_workspace = 1;
     */
    fromWorkspace: string;
    /**
     * @generated from protobuf field: bool optional = 2;
     */
    optional: boolean;
    /**
     * @generated from protobuf field: bool require_file = 3;
     */
    requireFile: boolean;
}
/**
 * @generated from protobuf message foundation.schema.SidecarContainer
 */
export interface SidecarContainer {
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string; // Optional.
    /**
     * @generated from protobuf field: string binary = 1;
     */
    binary: string;
    /**
     * @generated from protobuf field: repeated string args = 2;
     */
    args: string[];
}
/**
 * @generated from protobuf message foundation.schema.StartupPlan
 */
export interface StartupPlan {
    /**
     * @generated from protobuf field: repeated string args = 1;
     */
    args: string[];
    /**
     * @generated from protobuf field: map<string, string> env = 2;
     */
    env: {
        [key: string]: string;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Invocation$Type extends MessageType<Invocation> {
    constructor() {
        super("foundation.schema.Invocation", [
            { no: 1, name: "binary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "args", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "working_dir", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "snapshots", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => InvocationSnapshot } },
            { no: 6, name: "no_cache", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "requires_keys", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "inject", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Invocation_ValueInjection }
        ]);
    }
    create(value?: PartialMessage<Invocation>): Invocation {
        const message = { binary: "", args: [], workingDir: "", snapshots: {}, noCache: false, requiresKeys: false, inject: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Invocation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Invocation): Invocation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string binary */ 1:
                    message.binary = reader.string();
                    break;
                case /* repeated string args */ 2:
                    message.args.push(reader.string());
                    break;
                case /* string working_dir */ 4:
                    message.workingDir = reader.string();
                    break;
                case /* map<string, foundation.schema.InvocationSnapshot> snapshots */ 5:
                    this.binaryReadMap5(message.snapshots, reader, options);
                    break;
                case /* bool no_cache */ 6:
                    message.noCache = reader.bool();
                    break;
                case /* bool requires_keys */ 7:
                    message.requiresKeys = reader.bool();
                    break;
                case /* repeated foundation.schema.Invocation.ValueInjection inject */ 8:
                    message.inject.push(Invocation_ValueInjection.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: Invocation["snapshots"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Invocation["snapshots"] | undefined, val: Invocation["snapshots"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = InvocationSnapshot.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field foundation.schema.Invocation.snapshots");
            }
        }
        map[key ?? ""] = val ?? InvocationSnapshot.create();
    }
    internalBinaryWrite(message: Invocation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string binary = 1; */
        if (message.binary !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.binary);
        /* repeated string args = 2; */
        for (let i = 0; i < message.args.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.args[i]);
        /* string working_dir = 4; */
        if (message.workingDir !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.workingDir);
        /* map<string, foundation.schema.InvocationSnapshot> snapshots = 5; */
        for (let k of Object.keys(message.snapshots)) {
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            InvocationSnapshot.internalBinaryWrite(message.snapshots[k], writer, options);
            writer.join().join();
        }
        /* bool no_cache = 6; */
        if (message.noCache !== false)
            writer.tag(6, WireType.Varint).bool(message.noCache);
        /* bool requires_keys = 7; */
        if (message.requiresKeys !== false)
            writer.tag(7, WireType.Varint).bool(message.requiresKeys);
        /* repeated foundation.schema.Invocation.ValueInjection inject = 8; */
        for (let i = 0; i < message.inject.length; i++)
            Invocation_ValueInjection.internalBinaryWrite(message.inject[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.Invocation
 */
export const Invocation = new Invocation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Invocation_ValueInjection$Type extends MessageType<Invocation_ValueInjection> {
    constructor() {
        super("foundation.schema.Invocation.ValueInjection", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Invocation_ValueInjection>): Invocation_ValueInjection {
        const message = { type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Invocation_ValueInjection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Invocation_ValueInjection): Invocation_ValueInjection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Invocation_ValueInjection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.Invocation.ValueInjection
 */
export const Invocation_ValueInjection = new Invocation_ValueInjection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvocationSnapshot$Type extends MessageType<InvocationSnapshot> {
    constructor() {
        super("foundation.schema.InvocationSnapshot", [
            { no: 1, name: "from_workspace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "optional", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "require_file", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<InvocationSnapshot>): InvocationSnapshot {
        const message = { fromWorkspace: "", optional: false, requireFile: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InvocationSnapshot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InvocationSnapshot): InvocationSnapshot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string from_workspace */ 1:
                    message.fromWorkspace = reader.string();
                    break;
                case /* bool optional */ 2:
                    message.optional = reader.bool();
                    break;
                case /* bool require_file */ 3:
                    message.requireFile = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InvocationSnapshot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string from_workspace = 1; */
        if (message.fromWorkspace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromWorkspace);
        /* bool optional = 2; */
        if (message.optional !== false)
            writer.tag(2, WireType.Varint).bool(message.optional);
        /* bool require_file = 3; */
        if (message.requireFile !== false)
            writer.tag(3, WireType.Varint).bool(message.requireFile);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.InvocationSnapshot
 */
export const InvocationSnapshot = new InvocationSnapshot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SidecarContainer$Type extends MessageType<SidecarContainer> {
    constructor() {
        super("foundation.schema.SidecarContainer", [
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "binary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "args", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SidecarContainer>): SidecarContainer {
        const message = { name: "", binary: "", args: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SidecarContainer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SidecarContainer): SidecarContainer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string binary */ 1:
                    message.binary = reader.string();
                    break;
                case /* repeated string args */ 2:
                    message.args.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SidecarContainer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string binary = 1; */
        if (message.binary !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.binary);
        /* repeated string args = 2; */
        for (let i = 0; i < message.args.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.args[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.SidecarContainer
 */
export const SidecarContainer = new SidecarContainer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartupPlan$Type extends MessageType<StartupPlan> {
    constructor() {
        super("foundation.schema.StartupPlan", [
            { no: 1, name: "args", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "env", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<StartupPlan>): StartupPlan {
        const message = { args: [], env: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartupPlan>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartupPlan): StartupPlan {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string args */ 1:
                    message.args.push(reader.string());
                    break;
                case /* map<string, string> env */ 2:
                    this.binaryReadMap2(message.env, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: StartupPlan["env"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof StartupPlan["env"] | undefined, val: StartupPlan["env"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field foundation.schema.StartupPlan.env");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: StartupPlan, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string args = 1; */
        for (let i = 0; i < message.args.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.args[i]);
        /* map<string, string> env = 2; */
        for (let k of Object.keys(message.env))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.env[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.StartupPlan
 */
export const StartupPlan = new StartupPlan$Type();
