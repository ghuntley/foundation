// @generated by protobuf-ts 2.7.0 with parameter force_disable_services,add_pb_suffix,force_exclude_all_options
// @generated from protobuf file "schema/workspace.proto" (package "foundation.schema", syntax proto3)
// tslint:disable
//
// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Environment_Purpose } from "./schema_pb";
import { Any } from "../google/protobuf/any_pb";
import { Environment } from "./schema_pb";
/**
 * Workspace definition.
 *
 * @generated from protobuf message foundation.schema.Workspace
 */
export interface Workspace {
    /**
     * @generated from protobuf field: string module_name = 1;
     */
    moduleName: string;
    /**
     * @generated from protobuf field: repeated foundation.schema.Environment env = 2;
     */
    env: Environment[];
    /**
     * Package manager.
     *
     * @generated from protobuf field: repeated foundation.schema.Workspace.Dependency dep = 3;
     */
    dep: Workspace_Dependency[];
    /**
     * Development options.
     *
     * @generated from protobuf field: repeated foundation.schema.Workspace.Replace replace = 4;
     */
    replace: Workspace_Replace[];
    /**
     * @generated from protobuf field: repeated string private_repo = 5;
     */
    privateRepo: string[];
    /**
     * Workspace-wide pre-compiled binaries.
     *
     * @generated from protobuf field: repeated foundation.schema.Workspace.BinaryDigest prebuilt_binary = 6;
     */
    prebuiltBinary: Workspace_BinaryDigest[];
    /**
     * @generated from protobuf field: string prebuilt_base_repository = 7;
     */
    prebuiltBaseRepository: string;
    /**
     * @generated from protobuf field: foundation.schema.Workspace.FoundationRequirements foundation = 8;
     */
    foundation?: Workspace_FoundationRequirements;
}
/**
 * @generated from protobuf message foundation.schema.Workspace.Dependency
 */
export interface Workspace_Dependency {
    /**
     * @generated from protobuf field: string module_name = 1;
     */
    moduleName: string;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
}
/**
 * @generated from protobuf message foundation.schema.Workspace.Replace
 */
export interface Workspace_Replace {
    /**
     * @generated from protobuf field: string module_name = 1;
     */
    moduleName: string;
    /**
     * @generated from protobuf field: string path = 2;
     */
    path: string;
}
/**
 * @generated from protobuf message foundation.schema.Workspace.BinaryDigest
 */
export interface Workspace_BinaryDigest {
    /**
     * @generated from protobuf field: string package_name = 1;
     */
    packageName: string;
    /**
     * @generated from protobuf field: string digest = 2;
     */
    digest: string;
    /**
     * @generated from protobuf field: string repository = 3;
     */
    repository: string;
}
/**
 * @generated from protobuf message foundation.schema.Workspace.FoundationRequirements
 */
export interface Workspace_FoundationRequirements {
    /**
     * @generated from protobuf field: int32 minimum_api = 1;
     */
    minimumApi: number;
}
/**
 * Configure a developer workstation.
 *
 * @generated from protobuf message foundation.schema.DevHost
 */
export interface DevHost {
    /**
     * @generated from protobuf field: repeated foundation.schema.DevHost.ConfigureEnvironment configure = 1;
     */
    configure: DevHost_ConfigureEnvironment[];
    /**
     * @generated from protobuf field: repeated foundation.schema.DevHost.ConfigurePlatform configure_platform = 2;
     */
    configurePlatform: DevHost_ConfigurePlatform[];
    /**
     * @generated from protobuf field: repeated google.protobuf.Any configure_tools = 3;
     */
    configureTools: Any[];
}
/**
 * @generated from protobuf message foundation.schema.DevHost.ConfigureEnvironment
 */
export interface DevHost_ConfigureEnvironment {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string runtime = 2;
     */
    runtime: string;
    /**
     * @generated from protobuf field: foundation.schema.Environment.Purpose purpose = 3;
     */
    purpose: Environment_Purpose;
    /**
     * @generated from protobuf field: repeated google.protobuf.Any configuration = 4;
     */
    configuration: Any[];
}
/**
 * @generated from protobuf message foundation.schema.DevHost.ConfigurePlatform
 */
export interface DevHost_ConfigurePlatform {
    /**
     * @generated from protobuf field: string architecture = 1;
     */
    architecture: string;
    /**
     * @generated from protobuf field: string os = 2;
     */
    os: string;
    /**
     * @generated from protobuf field: string variant = 3;
     */
    variant: string;
    /**
     * @generated from protobuf field: repeated google.protobuf.Any configuration = 4;
     */
    configuration: Any[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Workspace$Type extends MessageType<Workspace> {
    constructor() {
        super("foundation.schema.Workspace", [
            { no: 1, name: "module_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "env", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Environment },
            { no: 3, name: "dep", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Workspace_Dependency },
            { no: 4, name: "replace", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Workspace_Replace },
            { no: 5, name: "private_repo", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "prebuilt_binary", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Workspace_BinaryDigest },
            { no: 7, name: "prebuilt_base_repository", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "foundation", kind: "message", T: () => Workspace_FoundationRequirements }
        ]);
    }
    create(value?: PartialMessage<Workspace>): Workspace {
        const message = { moduleName: "", env: [], dep: [], replace: [], privateRepo: [], prebuiltBinary: [], prebuiltBaseRepository: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Workspace>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Workspace): Workspace {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module_name */ 1:
                    message.moduleName = reader.string();
                    break;
                case /* repeated foundation.schema.Environment env */ 2:
                    message.env.push(Environment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated foundation.schema.Workspace.Dependency dep */ 3:
                    message.dep.push(Workspace_Dependency.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated foundation.schema.Workspace.Replace replace */ 4:
                    message.replace.push(Workspace_Replace.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string private_repo */ 5:
                    message.privateRepo.push(reader.string());
                    break;
                case /* repeated foundation.schema.Workspace.BinaryDigest prebuilt_binary */ 6:
                    message.prebuiltBinary.push(Workspace_BinaryDigest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string prebuilt_base_repository */ 7:
                    message.prebuiltBaseRepository = reader.string();
                    break;
                case /* foundation.schema.Workspace.FoundationRequirements foundation */ 8:
                    message.foundation = Workspace_FoundationRequirements.internalBinaryRead(reader, reader.uint32(), options, message.foundation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Workspace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string module_name = 1; */
        if (message.moduleName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.moduleName);
        /* repeated foundation.schema.Environment env = 2; */
        for (let i = 0; i < message.env.length; i++)
            Environment.internalBinaryWrite(message.env[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated foundation.schema.Workspace.Dependency dep = 3; */
        for (let i = 0; i < message.dep.length; i++)
            Workspace_Dependency.internalBinaryWrite(message.dep[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated foundation.schema.Workspace.Replace replace = 4; */
        for (let i = 0; i < message.replace.length; i++)
            Workspace_Replace.internalBinaryWrite(message.replace[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string private_repo = 5; */
        for (let i = 0; i < message.privateRepo.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.privateRepo[i]);
        /* repeated foundation.schema.Workspace.BinaryDigest prebuilt_binary = 6; */
        for (let i = 0; i < message.prebuiltBinary.length; i++)
            Workspace_BinaryDigest.internalBinaryWrite(message.prebuiltBinary[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string prebuilt_base_repository = 7; */
        if (message.prebuiltBaseRepository !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.prebuiltBaseRepository);
        /* foundation.schema.Workspace.FoundationRequirements foundation = 8; */
        if (message.foundation)
            Workspace_FoundationRequirements.internalBinaryWrite(message.foundation, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.Workspace
 */
export const Workspace = new Workspace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Workspace_Dependency$Type extends MessageType<Workspace_Dependency> {
    constructor() {
        super("foundation.schema.Workspace.Dependency", [
            { no: 1, name: "module_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Workspace_Dependency>): Workspace_Dependency {
        const message = { moduleName: "", version: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Workspace_Dependency>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Workspace_Dependency): Workspace_Dependency {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module_name */ 1:
                    message.moduleName = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Workspace_Dependency, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string module_name = 1; */
        if (message.moduleName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.moduleName);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.Workspace.Dependency
 */
export const Workspace_Dependency = new Workspace_Dependency$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Workspace_Replace$Type extends MessageType<Workspace_Replace> {
    constructor() {
        super("foundation.schema.Workspace.Replace", [
            { no: 1, name: "module_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Workspace_Replace>): Workspace_Replace {
        const message = { moduleName: "", path: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Workspace_Replace>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Workspace_Replace): Workspace_Replace {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module_name */ 1:
                    message.moduleName = reader.string();
                    break;
                case /* string path */ 2:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Workspace_Replace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string module_name = 1; */
        if (message.moduleName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.moduleName);
        /* string path = 2; */
        if (message.path !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.Workspace.Replace
 */
export const Workspace_Replace = new Workspace_Replace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Workspace_BinaryDigest$Type extends MessageType<Workspace_BinaryDigest> {
    constructor() {
        super("foundation.schema.Workspace.BinaryDigest", [
            { no: 1, name: "package_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "digest", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "repository", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Workspace_BinaryDigest>): Workspace_BinaryDigest {
        const message = { packageName: "", digest: "", repository: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Workspace_BinaryDigest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Workspace_BinaryDigest): Workspace_BinaryDigest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string package_name */ 1:
                    message.packageName = reader.string();
                    break;
                case /* string digest */ 2:
                    message.digest = reader.string();
                    break;
                case /* string repository */ 3:
                    message.repository = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Workspace_BinaryDigest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string package_name = 1; */
        if (message.packageName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.packageName);
        /* string digest = 2; */
        if (message.digest !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.digest);
        /* string repository = 3; */
        if (message.repository !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.repository);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.Workspace.BinaryDigest
 */
export const Workspace_BinaryDigest = new Workspace_BinaryDigest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Workspace_FoundationRequirements$Type extends MessageType<Workspace_FoundationRequirements> {
    constructor() {
        super("foundation.schema.Workspace.FoundationRequirements", [
            { no: 1, name: "minimum_api", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Workspace_FoundationRequirements>): Workspace_FoundationRequirements {
        const message = { minimumApi: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Workspace_FoundationRequirements>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Workspace_FoundationRequirements): Workspace_FoundationRequirements {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 minimum_api */ 1:
                    message.minimumApi = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Workspace_FoundationRequirements, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 minimum_api = 1; */
        if (message.minimumApi !== 0)
            writer.tag(1, WireType.Varint).int32(message.minimumApi);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.Workspace.FoundationRequirements
 */
export const Workspace_FoundationRequirements = new Workspace_FoundationRequirements$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DevHost$Type extends MessageType<DevHost> {
    constructor() {
        super("foundation.schema.DevHost", [
            { no: 1, name: "configure", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DevHost_ConfigureEnvironment },
            { no: 2, name: "configure_platform", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DevHost_ConfigurePlatform },
            { no: 3, name: "configure_tools", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any }
        ]);
    }
    create(value?: PartialMessage<DevHost>): DevHost {
        const message = { configure: [], configurePlatform: [], configureTools: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DevHost>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DevHost): DevHost {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated foundation.schema.DevHost.ConfigureEnvironment configure */ 1:
                    message.configure.push(DevHost_ConfigureEnvironment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated foundation.schema.DevHost.ConfigurePlatform configure_platform */ 2:
                    message.configurePlatform.push(DevHost_ConfigurePlatform.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.Any configure_tools */ 3:
                    message.configureTools.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DevHost, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated foundation.schema.DevHost.ConfigureEnvironment configure = 1; */
        for (let i = 0; i < message.configure.length; i++)
            DevHost_ConfigureEnvironment.internalBinaryWrite(message.configure[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated foundation.schema.DevHost.ConfigurePlatform configure_platform = 2; */
        for (let i = 0; i < message.configurePlatform.length; i++)
            DevHost_ConfigurePlatform.internalBinaryWrite(message.configurePlatform[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.Any configure_tools = 3; */
        for (let i = 0; i < message.configureTools.length; i++)
            Any.internalBinaryWrite(message.configureTools[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.DevHost
 */
export const DevHost = new DevHost$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DevHost_ConfigureEnvironment$Type extends MessageType<DevHost_ConfigureEnvironment> {
    constructor() {
        super("foundation.schema.DevHost.ConfigureEnvironment", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "runtime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "purpose", kind: "enum", T: () => ["foundation.schema.Environment.Purpose", Environment_Purpose] },
            { no: 4, name: "configuration", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any }
        ]);
    }
    create(value?: PartialMessage<DevHost_ConfigureEnvironment>): DevHost_ConfigureEnvironment {
        const message = { name: "", runtime: "", purpose: 0, configuration: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DevHost_ConfigureEnvironment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DevHost_ConfigureEnvironment): DevHost_ConfigureEnvironment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string runtime */ 2:
                    message.runtime = reader.string();
                    break;
                case /* foundation.schema.Environment.Purpose purpose */ 3:
                    message.purpose = reader.int32();
                    break;
                case /* repeated google.protobuf.Any configuration */ 4:
                    message.configuration.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DevHost_ConfigureEnvironment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string runtime = 2; */
        if (message.runtime !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.runtime);
        /* foundation.schema.Environment.Purpose purpose = 3; */
        if (message.purpose !== 0)
            writer.tag(3, WireType.Varint).int32(message.purpose);
        /* repeated google.protobuf.Any configuration = 4; */
        for (let i = 0; i < message.configuration.length; i++)
            Any.internalBinaryWrite(message.configuration[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.DevHost.ConfigureEnvironment
 */
export const DevHost_ConfigureEnvironment = new DevHost_ConfigureEnvironment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DevHost_ConfigurePlatform$Type extends MessageType<DevHost_ConfigurePlatform> {
    constructor() {
        super("foundation.schema.DevHost.ConfigurePlatform", [
            { no: 1, name: "architecture", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "os", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "variant", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "configuration", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any }
        ]);
    }
    create(value?: PartialMessage<DevHost_ConfigurePlatform>): DevHost_ConfigurePlatform {
        const message = { architecture: "", os: "", variant: "", configuration: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DevHost_ConfigurePlatform>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DevHost_ConfigurePlatform): DevHost_ConfigurePlatform {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string architecture */ 1:
                    message.architecture = reader.string();
                    break;
                case /* string os */ 2:
                    message.os = reader.string();
                    break;
                case /* string variant */ 3:
                    message.variant = reader.string();
                    break;
                case /* repeated google.protobuf.Any configuration */ 4:
                    message.configuration.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DevHost_ConfigurePlatform, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string architecture = 1; */
        if (message.architecture !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.architecture);
        /* string os = 2; */
        if (message.os !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.os);
        /* string variant = 3; */
        if (message.variant !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.variant);
        /* repeated google.protobuf.Any configuration = 4; */
        for (let i = 0; i < message.configuration.length; i++)
            Any.internalBinaryWrite(message.configuration[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.schema.DevHost.ConfigurePlatform
 */
export const DevHost_ConfigurePlatform = new DevHost_ConfigurePlatform$Type();
