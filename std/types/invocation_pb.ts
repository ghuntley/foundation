// @generated by protobuf-ts 2.7.0 with parameter force_disable_services,add_pb_suffix
// @generated from protobuf file "std/types/invocation.proto" (package "foundation.std.types", syntax proto3)
// tslint:disable
//
// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BinaryConfig } from "../../schema/binary_pb";
import { Any } from "@namespacelabs/fn-protos";
/**
 * @generated from protobuf message foundation.std.types.DeferredInvocationSource
 */
export interface DeferredInvocationSource {
    /**
     * @generated from protobuf field: string binary = 1;
     */
    binary: string;
    /**
     * @generated from protobuf field: bool cacheable = 2;
     */
    cacheable: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Any with_input = 3;
     */
    withInput?: Any;
}
/**
 * @generated from protobuf message foundation.std.types.DeferredInvocation
 */
export interface DeferredInvocation {
    /**
     * @generated from protobuf field: string binary_package = 1;
     */
    binaryPackage: string;
    /**
     * @generated from protobuf field: string image = 2;
     */
    image: string;
    /**
     * @generated from protobuf field: foundation.schema.BinaryConfig binary_config = 3;
     */
    binaryConfig?: BinaryConfig;
    /**
     * @generated from protobuf field: bool cacheable = 4;
     */
    cacheable: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Any with_input = 5;
     */
    withInput?: Any;
}
// @generated message type with reflection information, may provide speed optimized methods
class DeferredInvocationSource$Type extends MessageType<DeferredInvocationSource> {
    constructor() {
        super("foundation.std.types.DeferredInvocationSource", [
            { no: 1, name: "binary", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "foundation.std.proto.is_package": true } },
            { no: 2, name: "cacheable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "with_input", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<DeferredInvocationSource>): DeferredInvocationSource {
        const message = { binary: "", cacheable: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeferredInvocationSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeferredInvocationSource): DeferredInvocationSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string binary */ 1:
                    message.binary = reader.string();
                    break;
                case /* bool cacheable */ 2:
                    message.cacheable = reader.bool();
                    break;
                case /* google.protobuf.Any with_input */ 3:
                    message.withInput = Any.internalBinaryRead(reader, reader.uint32(), options, message.withInput);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeferredInvocationSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string binary = 1; */
        if (message.binary !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.binary);
        /* bool cacheable = 2; */
        if (message.cacheable !== false)
            writer.tag(2, WireType.Varint).bool(message.cacheable);
        /* google.protobuf.Any with_input = 3; */
        if (message.withInput)
            Any.internalBinaryWrite(message.withInput, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.std.types.DeferredInvocationSource
 */
export const DeferredInvocationSource = new DeferredInvocationSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeferredInvocation$Type extends MessageType<DeferredInvocation> {
    constructor() {
        super("foundation.std.types.DeferredInvocation", [
            { no: 1, name: "binary_package", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "binary_config", kind: "message", T: () => BinaryConfig },
            { no: 4, name: "cacheable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "with_input", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<DeferredInvocation>): DeferredInvocation {
        const message = { binaryPackage: "", image: "", cacheable: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeferredInvocation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeferredInvocation): DeferredInvocation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string binary_package */ 1:
                    message.binaryPackage = reader.string();
                    break;
                case /* string image */ 2:
                    message.image = reader.string();
                    break;
                case /* foundation.schema.BinaryConfig binary_config */ 3:
                    message.binaryConfig = BinaryConfig.internalBinaryRead(reader, reader.uint32(), options, message.binaryConfig);
                    break;
                case /* bool cacheable */ 4:
                    message.cacheable = reader.bool();
                    break;
                case /* google.protobuf.Any with_input */ 5:
                    message.withInput = Any.internalBinaryRead(reader, reader.uint32(), options, message.withInput);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeferredInvocation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string binary_package = 1; */
        if (message.binaryPackage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.binaryPackage);
        /* string image = 2; */
        if (message.image !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.image);
        /* foundation.schema.BinaryConfig binary_config = 3; */
        if (message.binaryConfig)
            BinaryConfig.internalBinaryWrite(message.binaryConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool cacheable = 4; */
        if (message.cacheable !== false)
            writer.tag(4, WireType.Varint).bool(message.cacheable);
        /* google.protobuf.Any with_input = 5; */
        if (message.withInput)
            Any.internalBinaryWrite(message.withInput, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.std.types.DeferredInvocation
 */
export const DeferredInvocation = new DeferredInvocation$Type();
