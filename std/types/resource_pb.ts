// @generated by protobuf-ts 2.7.0 with parameter force_disable_services,add_pb_suffix
// @generated from protobuf file "std/types/resource.proto" (package "foundation.std.types", syntax proto3)
// tslint:disable
//
// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DeferredInvocationSource } from "./invocation_pb";
import { DeferredInvocation } from "./invocation_pb";
/**
 * @generated from protobuf message foundation.std.types.Resource
 */
export interface Resource {
    /**
     * @generated from protobuf field: string path = 1;
     */
    path: string;
    /**
     * @generated from protobuf field: bytes contents = 2;
     */
    contents: Uint8Array;
}
/**
 * @generated from protobuf message foundation.std.types.DeferredResource
 */
export interface DeferredResource {
    /**
     * @generated from protobuf field: foundation.std.types.Resource inline = 1;
     */
    inline?: Resource;
    /**
     * @generated from protobuf field: foundation.std.types.DeferredInvocation from_invocation = 2;
     */
    fromInvocation?: DeferredInvocation;
}
/**
 * @generated from protobuf message foundation.std.types.DeferredResourceSource
 */
export interface DeferredResourceSource {
    /**
     * @generated from protobuf field: foundation.std.types.Resource inline = 1;
     */
    inline?: Resource;
    /**
     * @generated from protobuf field: foundation.std.types.DeferredInvocationSource from_invocation = 2;
     */
    fromInvocation?: DeferredInvocationSource;
}
// @generated message type with reflection information, may provide speed optimized methods
class Resource$Type extends MessageType<Resource> {
    constructor() {
        super("foundation.std.types.Resource", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contents", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Resource>): Resource {
        const message = { path: "", contents: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Resource): Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* bytes contents */ 2:
                    message.contents = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* bytes contents = 2; */
        if (message.contents.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.contents);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.std.types.Resource
 */
export const Resource = new Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeferredResource$Type extends MessageType<DeferredResource> {
    constructor() {
        super("foundation.std.types.DeferredResource", [
            { no: 1, name: "inline", kind: "message", T: () => Resource },
            { no: 2, name: "from_invocation", kind: "message", T: () => DeferredInvocation }
        ]);
    }
    create(value?: PartialMessage<DeferredResource>): DeferredResource {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeferredResource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeferredResource): DeferredResource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* foundation.std.types.Resource inline */ 1:
                    message.inline = Resource.internalBinaryRead(reader, reader.uint32(), options, message.inline);
                    break;
                case /* foundation.std.types.DeferredInvocation from_invocation */ 2:
                    message.fromInvocation = DeferredInvocation.internalBinaryRead(reader, reader.uint32(), options, message.fromInvocation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeferredResource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* foundation.std.types.Resource inline = 1; */
        if (message.inline)
            Resource.internalBinaryWrite(message.inline, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* foundation.std.types.DeferredInvocation from_invocation = 2; */
        if (message.fromInvocation)
            DeferredInvocation.internalBinaryWrite(message.fromInvocation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.std.types.DeferredResource
 */
export const DeferredResource = new DeferredResource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeferredResourceSource$Type extends MessageType<DeferredResourceSource> {
    constructor() {
        super("foundation.std.types.DeferredResourceSource", [
            { no: 1, name: "inline", kind: "message", T: () => Resource },
            { no: 2, name: "from_invocation", kind: "message", T: () => DeferredInvocationSource }
        ]);
    }
    create(value?: PartialMessage<DeferredResourceSource>): DeferredResourceSource {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeferredResourceSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeferredResourceSource): DeferredResourceSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* foundation.std.types.Resource inline */ 1:
                    message.inline = Resource.internalBinaryRead(reader, reader.uint32(), options, message.inline);
                    break;
                case /* foundation.std.types.DeferredInvocationSource from_invocation */ 2:
                    message.fromInvocation = DeferredInvocationSource.internalBinaryRead(reader, reader.uint32(), options, message.fromInvocation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeferredResourceSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* foundation.std.types.Resource inline = 1; */
        if (message.inline)
            Resource.internalBinaryWrite(message.inline, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* foundation.std.types.DeferredInvocationSource from_invocation = 2; */
        if (message.fromInvocation)
            DeferredInvocationSource.internalBinaryWrite(message.fromInvocation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message foundation.std.types.DeferredResourceSource
 */
export const DeferredResourceSource = new DeferredResourceSource$Type();
