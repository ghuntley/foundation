// source: std/secrets/provider.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.foundation.std.secrets.GenerateSpecification', null, global);
goog.exportSymbol('proto.foundation.std.secrets.GenerateSpecification.Format', null, global);
goog.exportSymbol('proto.foundation.std.secrets.Secret', null, global);
goog.exportSymbol('proto.foundation.std.secrets.SecretDevMap', null, global);
goog.exportSymbol('proto.foundation.std.secrets.SecretDevMap.Configure', null, global);
goog.exportSymbol('proto.foundation.std.secrets.SecretDevMap.SecretSpec', null, global);
goog.exportSymbol('proto.foundation.std.secrets.Secrets', null, global);
goog.exportSymbol('proto.foundation.std.secrets.Value', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.foundation.std.secrets.Secrets = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.foundation.std.secrets.Secrets.repeatedFields_, null);
};
goog.inherits(proto.foundation.std.secrets.Secrets, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.foundation.std.secrets.Secrets.displayName = 'proto.foundation.std.secrets.Secrets';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.foundation.std.secrets.Secret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.foundation.std.secrets.Secret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.foundation.std.secrets.Secret.displayName = 'proto.foundation.std.secrets.Secret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.foundation.std.secrets.GenerateSpecification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.foundation.std.secrets.GenerateSpecification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.foundation.std.secrets.GenerateSpecification.displayName = 'proto.foundation.std.secrets.GenerateSpecification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.foundation.std.secrets.SecretDevMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.foundation.std.secrets.SecretDevMap.repeatedFields_, null);
};
goog.inherits(proto.foundation.std.secrets.SecretDevMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.foundation.std.secrets.SecretDevMap.displayName = 'proto.foundation.std.secrets.SecretDevMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.foundation.std.secrets.SecretDevMap.Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.foundation.std.secrets.SecretDevMap.Configure.repeatedFields_, null);
};
goog.inherits(proto.foundation.std.secrets.SecretDevMap.Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.foundation.std.secrets.SecretDevMap.Configure.displayName = 'proto.foundation.std.secrets.SecretDevMap.Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.foundation.std.secrets.SecretDevMap.SecretSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.foundation.std.secrets.SecretDevMap.SecretSpec.displayName = 'proto.foundation.std.secrets.SecretDevMap.SecretSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.foundation.std.secrets.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.foundation.std.secrets.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.foundation.std.secrets.Value.displayName = 'proto.foundation.std.secrets.Value';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.foundation.std.secrets.Secrets.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.foundation.std.secrets.Secrets.prototype.toObject = function(opt_includeInstance) {
  return proto.foundation.std.secrets.Secrets.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.foundation.std.secrets.Secrets} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.Secrets.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretList: jspb.Message.toObjectList(msg.getSecretList(),
    proto.foundation.std.secrets.Secret.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.foundation.std.secrets.Secrets}
 */
proto.foundation.std.secrets.Secrets.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.foundation.std.secrets.Secrets;
  return proto.foundation.std.secrets.Secrets.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.foundation.std.secrets.Secrets} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.foundation.std.secrets.Secrets}
 */
proto.foundation.std.secrets.Secrets.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.foundation.std.secrets.Secret;
      reader.readMessage(value,proto.foundation.std.secrets.Secret.deserializeBinaryFromReader);
      msg.addSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.foundation.std.secrets.Secrets.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.foundation.std.secrets.Secrets.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.foundation.std.secrets.Secrets} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.Secrets.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.foundation.std.secrets.Secret.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Secret secret = 1;
 * @return {!Array<!proto.foundation.std.secrets.Secret>}
 */
proto.foundation.std.secrets.Secrets.prototype.getSecretList = function() {
  return /** @type{!Array<!proto.foundation.std.secrets.Secret>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.foundation.std.secrets.Secret, 1));
};


/**
 * @param {!Array<!proto.foundation.std.secrets.Secret>} value
 * @return {!proto.foundation.std.secrets.Secrets} returns this
*/
proto.foundation.std.secrets.Secrets.prototype.setSecretList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.foundation.std.secrets.Secret=} opt_value
 * @param {number=} opt_index
 * @return {!proto.foundation.std.secrets.Secret}
 */
proto.foundation.std.secrets.Secrets.prototype.addSecret = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.foundation.std.secrets.Secret, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.foundation.std.secrets.Secrets} returns this
 */
proto.foundation.std.secrets.Secrets.prototype.clearSecretList = function() {
  return this.setSecretList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.foundation.std.secrets.Secret.prototype.toObject = function(opt_includeInstance) {
  return proto.foundation.std.secrets.Secret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.foundation.std.secrets.Secret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.Secret.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    generate: (f = msg.getGenerate()) && proto.foundation.std.secrets.GenerateSpecification.toObject(includeInstance, f),
    optional: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    experimentalMountAsEnvVar: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.foundation.std.secrets.Secret}
 */
proto.foundation.std.secrets.Secret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.foundation.std.secrets.Secret;
  return proto.foundation.std.secrets.Secret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.foundation.std.secrets.Secret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.foundation.std.secrets.Secret}
 */
proto.foundation.std.secrets.Secret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.foundation.std.secrets.GenerateSpecification;
      reader.readMessage(value,proto.foundation.std.secrets.GenerateSpecification.deserializeBinaryFromReader);
      msg.setGenerate(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptional(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setExperimentalMountAsEnvVar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.foundation.std.secrets.Secret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.foundation.std.secrets.Secret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.foundation.std.secrets.Secret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.Secret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGenerate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.foundation.std.secrets.GenerateSpecification.serializeBinaryToWriter
    );
  }
  f = message.getOptional();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getExperimentalMountAsEnvVar();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.foundation.std.secrets.Secret.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.foundation.std.secrets.Secret} returns this
 */
proto.foundation.std.secrets.Secret.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional GenerateSpecification generate = 3;
 * @return {?proto.foundation.std.secrets.GenerateSpecification}
 */
proto.foundation.std.secrets.Secret.prototype.getGenerate = function() {
  return /** @type{?proto.foundation.std.secrets.GenerateSpecification} */ (
    jspb.Message.getWrapperField(this, proto.foundation.std.secrets.GenerateSpecification, 3));
};


/**
 * @param {?proto.foundation.std.secrets.GenerateSpecification|undefined} value
 * @return {!proto.foundation.std.secrets.Secret} returns this
*/
proto.foundation.std.secrets.Secret.prototype.setGenerate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.foundation.std.secrets.Secret} returns this
 */
proto.foundation.std.secrets.Secret.prototype.clearGenerate = function() {
  return this.setGenerate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.foundation.std.secrets.Secret.prototype.hasGenerate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool optional = 5;
 * @return {boolean}
 */
proto.foundation.std.secrets.Secret.prototype.getOptional = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.foundation.std.secrets.Secret} returns this
 */
proto.foundation.std.secrets.Secret.prototype.setOptional = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string experimental_mount_as_env_var = 6;
 * @return {string}
 */
proto.foundation.std.secrets.Secret.prototype.getExperimentalMountAsEnvVar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.foundation.std.secrets.Secret} returns this
 */
proto.foundation.std.secrets.Secret.prototype.setExperimentalMountAsEnvVar = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.foundation.std.secrets.GenerateSpecification.prototype.toObject = function(opt_includeInstance) {
  return proto.foundation.std.secrets.GenerateSpecification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.foundation.std.secrets.GenerateSpecification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.GenerateSpecification.toObject = function(includeInstance, msg) {
  var f, obj = {
    uniqueId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    randomByteCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    format: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.foundation.std.secrets.GenerateSpecification}
 */
proto.foundation.std.secrets.GenerateSpecification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.foundation.std.secrets.GenerateSpecification;
  return proto.foundation.std.secrets.GenerateSpecification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.foundation.std.secrets.GenerateSpecification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.foundation.std.secrets.GenerateSpecification}
 */
proto.foundation.std.secrets.GenerateSpecification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniqueId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRandomByteCount(value);
      break;
    case 3:
      var value = /** @type {!proto.foundation.std.secrets.GenerateSpecification.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.foundation.std.secrets.GenerateSpecification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.foundation.std.secrets.GenerateSpecification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.foundation.std.secrets.GenerateSpecification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.GenerateSpecification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUniqueId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRandomByteCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.foundation.std.secrets.GenerateSpecification.Format = {
  FORMAT_UNKNOWN: 0,
  FORMAT_BASE64: 1,
  FORMAT_BASE32: 2
};

/**
 * optional string unique_id = 1;
 * @return {string}
 */
proto.foundation.std.secrets.GenerateSpecification.prototype.getUniqueId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.foundation.std.secrets.GenerateSpecification} returns this
 */
proto.foundation.std.secrets.GenerateSpecification.prototype.setUniqueId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 random_byte_count = 2;
 * @return {number}
 */
proto.foundation.std.secrets.GenerateSpecification.prototype.getRandomByteCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.foundation.std.secrets.GenerateSpecification} returns this
 */
proto.foundation.std.secrets.GenerateSpecification.prototype.setRandomByteCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Format format = 3;
 * @return {!proto.foundation.std.secrets.GenerateSpecification.Format}
 */
proto.foundation.std.secrets.GenerateSpecification.prototype.getFormat = function() {
  return /** @type {!proto.foundation.std.secrets.GenerateSpecification.Format} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.foundation.std.secrets.GenerateSpecification.Format} value
 * @return {!proto.foundation.std.secrets.GenerateSpecification} returns this
 */
proto.foundation.std.secrets.GenerateSpecification.prototype.setFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.foundation.std.secrets.SecretDevMap.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.foundation.std.secrets.SecretDevMap.prototype.toObject = function(opt_includeInstance) {
  return proto.foundation.std.secrets.SecretDevMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.foundation.std.secrets.SecretDevMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.SecretDevMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    configureList: jspb.Message.toObjectList(msg.getConfigureList(),
    proto.foundation.std.secrets.SecretDevMap.Configure.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.foundation.std.secrets.SecretDevMap}
 */
proto.foundation.std.secrets.SecretDevMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.foundation.std.secrets.SecretDevMap;
  return proto.foundation.std.secrets.SecretDevMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.foundation.std.secrets.SecretDevMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.foundation.std.secrets.SecretDevMap}
 */
proto.foundation.std.secrets.SecretDevMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.foundation.std.secrets.SecretDevMap.Configure;
      reader.readMessage(value,proto.foundation.std.secrets.SecretDevMap.Configure.deserializeBinaryFromReader);
      msg.addConfigure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.foundation.std.secrets.SecretDevMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.foundation.std.secrets.SecretDevMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.foundation.std.secrets.SecretDevMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.SecretDevMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.foundation.std.secrets.SecretDevMap.Configure.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.foundation.std.secrets.SecretDevMap.Configure.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.foundation.std.secrets.SecretDevMap.Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.foundation.std.secrets.SecretDevMap.Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.foundation.std.secrets.SecretDevMap.Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.SecretDevMap.Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secretList: jspb.Message.toObjectList(msg.getSecretList(),
    proto.foundation.std.secrets.SecretDevMap.SecretSpec.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.foundation.std.secrets.SecretDevMap.Configure}
 */
proto.foundation.std.secrets.SecretDevMap.Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.foundation.std.secrets.SecretDevMap.Configure;
  return proto.foundation.std.secrets.SecretDevMap.Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.foundation.std.secrets.SecretDevMap.Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.foundation.std.secrets.SecretDevMap.Configure}
 */
proto.foundation.std.secrets.SecretDevMap.Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPackageName(value);
      break;
    case 2:
      var value = new proto.foundation.std.secrets.SecretDevMap.SecretSpec;
      reader.readMessage(value,proto.foundation.std.secrets.SecretDevMap.SecretSpec.deserializeBinaryFromReader);
      msg.addSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.foundation.std.secrets.SecretDevMap.Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.foundation.std.secrets.SecretDevMap.Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.foundation.std.secrets.SecretDevMap.Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.SecretDevMap.Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPackageName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecretList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.foundation.std.secrets.SecretDevMap.SecretSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string package_name = 1;
 * @return {string}
 */
proto.foundation.std.secrets.SecretDevMap.Configure.prototype.getPackageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.foundation.std.secrets.SecretDevMap.Configure} returns this
 */
proto.foundation.std.secrets.SecretDevMap.Configure.prototype.setPackageName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated SecretSpec secret = 2;
 * @return {!Array<!proto.foundation.std.secrets.SecretDevMap.SecretSpec>}
 */
proto.foundation.std.secrets.SecretDevMap.Configure.prototype.getSecretList = function() {
  return /** @type{!Array<!proto.foundation.std.secrets.SecretDevMap.SecretSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.foundation.std.secrets.SecretDevMap.SecretSpec, 2));
};


/**
 * @param {!Array<!proto.foundation.std.secrets.SecretDevMap.SecretSpec>} value
 * @return {!proto.foundation.std.secrets.SecretDevMap.Configure} returns this
*/
proto.foundation.std.secrets.SecretDevMap.Configure.prototype.setSecretList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.foundation.std.secrets.SecretDevMap.SecretSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.foundation.std.secrets.SecretDevMap.SecretSpec}
 */
proto.foundation.std.secrets.SecretDevMap.Configure.prototype.addSecret = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.foundation.std.secrets.SecretDevMap.SecretSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.foundation.std.secrets.SecretDevMap.Configure} returns this
 */
proto.foundation.std.secrets.SecretDevMap.Configure.prototype.clearSecretList = function() {
  return this.setSecretList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.foundation.std.secrets.SecretDevMap.SecretSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.foundation.std.secrets.SecretDevMap.SecretSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromPath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resourceName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.foundation.std.secrets.SecretDevMap.SecretSpec}
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.foundation.std.secrets.SecretDevMap.SecretSpec;
  return proto.foundation.std.secrets.SecretDevMap.SecretSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.foundation.std.secrets.SecretDevMap.SecretSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.foundation.std.secrets.SecretDevMap.SecretSpec}
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.foundation.std.secrets.SecretDevMap.SecretSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.foundation.std.secrets.SecretDevMap.SecretSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResourceName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.foundation.std.secrets.SecretDevMap.SecretSpec} returns this
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string from_path = 2;
 * @return {string}
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.prototype.getFromPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.foundation.std.secrets.SecretDevMap.SecretSpec} returns this
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.prototype.setFromPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.foundation.std.secrets.SecretDevMap.SecretSpec} returns this
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string resource_name = 4;
 * @return {string}
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.prototype.getResourceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.foundation.std.secrets.SecretDevMap.SecretSpec} returns this
 */
proto.foundation.std.secrets.SecretDevMap.SecretSpec.prototype.setResourceName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Configure configure = 1;
 * @return {!Array<!proto.foundation.std.secrets.SecretDevMap.Configure>}
 */
proto.foundation.std.secrets.SecretDevMap.prototype.getConfigureList = function() {
  return /** @type{!Array<!proto.foundation.std.secrets.SecretDevMap.Configure>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.foundation.std.secrets.SecretDevMap.Configure, 1));
};


/**
 * @param {!Array<!proto.foundation.std.secrets.SecretDevMap.Configure>} value
 * @return {!proto.foundation.std.secrets.SecretDevMap} returns this
*/
proto.foundation.std.secrets.SecretDevMap.prototype.setConfigureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.foundation.std.secrets.SecretDevMap.Configure=} opt_value
 * @param {number=} opt_index
 * @return {!proto.foundation.std.secrets.SecretDevMap.Configure}
 */
proto.foundation.std.secrets.SecretDevMap.prototype.addConfigure = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.foundation.std.secrets.SecretDevMap.Configure, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.foundation.std.secrets.SecretDevMap} returns this
 */
proto.foundation.std.secrets.SecretDevMap.prototype.clearConfigureList = function() {
  return this.setConfigureList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.foundation.std.secrets.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.foundation.std.secrets.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.foundation.std.secrets.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.foundation.std.secrets.Value}
 */
proto.foundation.std.secrets.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.foundation.std.secrets.Value;
  return proto.foundation.std.secrets.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.foundation.std.secrets.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.foundation.std.secrets.Value}
 */
proto.foundation.std.secrets.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.foundation.std.secrets.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.foundation.std.secrets.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.foundation.std.secrets.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.foundation.std.secrets.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.foundation.std.secrets.Value.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.foundation.std.secrets.Value} returns this
 */
proto.foundation.std.secrets.Value.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.foundation.std.secrets.Value.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.foundation.std.secrets.Value} returns this
 */
proto.foundation.std.secrets.Value.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.foundation.std.secrets);
